import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'net.minecraftforge.gradle'
    id 'idea'
    id 'net.darkhax.curseforgegradle' version '1.+'
    id 'com.modrinth.minotaur' version '2.+'
}

base {
    archivesName = "${mod_id}-forge-${forge_supported_versions}"
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true //Calls processResources when in dev

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--mod', mod_id, '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/'),
                    '--existing', file("${project(':common').projectDir}/src/main/resources/"),
                    '--existing', file('src/generated/resources/')
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources', 'src/generated/resources']
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":common")
	
	// CATALOGUE
    if (project.hasProperty('catalogue_version')) {
        runtimeOnly fg.deobf("curse.maven:catalogue-459701:${catalogue_version}")
    }

    // JADE
    if (project.hasProperty('jade_version')) {
        runtimeOnly fg.deobf("curse.maven:jade-324717:${jade_version}")
    }

    // JEI
    if (project.hasProperty('jei_version')) {
        if (project.hasProperty('enable_jei') && project.enable_jei.toBoolean()) {
            runtimeOnly(fg.deobf("mezz.jei:jei-${forge_minecraft_version}-forge:${jei_version}"))
        }
    }

//    runtimeOnly fg.deobf("maven.modrinth:tag-tooltips:a0H0FGkF")
//    runtimeOnly fg.deobf("curse.maven:item-nbt-viewer-514135:4578522")

    runtimeOnly fg.deobf("curse.maven:configured-457570:4462832") // https://www.curseforge.com/minecraft/mc-mods/configured
	
	implementation fg.deobf("maven.modrinth:industrial-foregoing:xrK5TYz5") // https://modrinth.com/mod/industrial-foregoing/versions
    implementation fg.deobf("maven.modrinth:titanium:f8zZ2kK5") // https://modrinth.com/mod/titanium/versions
    implementation fg.deobf("maven.modrinth:patchouli:VReLlKMv") // https://modrinth.com/mod/patchouli/versions

}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = file('../../API Tokens/mifa.md')
    def projectId = "${cf_id}".toString()
    def mainFile = upload(projectId, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) as Object
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file('changelog.md')
    mainFile.addGameVersion('Client', 'Server')
    mainFile.releaseType = "${release_type}"
    "${forge_release_versions}".split(',').each {
        mainFile.addGameVersion("${it}")
    }
    mainFile.addRequirement("industrial-foregoing")
}

modrinth {
    def tokenText = file('../../API Tokens/modrinth.md')
    if (tokenText.exists()) {
        token = tokenText.text
    } else {
        token = ""
    }
    projectId = "${modrinth_id}"
    versionName = getArchivesBaseName() + "-" + getVersion()
    versionType = "${release_type}"
    changelog = file('changelog.md').text
    uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
    gameVersions = "${forge_release_versions}".split(",") as List<String>
    dependencies {
        required.project "industrial-foregoing"
    }
}
